var mathjax = {{ 'true' if hoverxref_mathjax else 'false' }};
var sphinxtabs = {{ 'true' if hoverxref_sphinxtabs else 'false' }};

function reRender (instance, helper) {
    // Check if the content is the same as the default content until
    // it's different. Once it's different, re renders its content
    // to show it properly (this may involve calling external JS
    // libraries like MathJax) and finally call tooltip.reposition().
    if (helper.tooltip.textContent !== '{{ hoverxref_tooltip_content }}') {
        // https://stackoverflow.com/questions/5200545/how-to-recall-or-restart-mathjax
        if (mathjax) {
            if (typeof MathJax !== 'undefined') {
                console.debug('Triggering MathJax.Hub.Typeset()');
                MathJax.Hub.Queue((["Typeset", MathJax.Hub, helper.tooltip.id]));
            } else {
                console.debug('Not triggering MathJax because it is not defined');
            };

        };
        instance.reposition();
    } else {
        setTimeout(reRender, 100, instance, helper);
    };
}


$(document).ready(function() {
    $('.hoverxref').tooltipster({
        theme: {{ hoverxref_tooltip_theme }},
        interactive: {{ 'true' if hoverxref_tooltip_interactive else 'false' }},
        maxWidth: {{ hoverxref_tooltip_maxwidth }},
        animation: '{{ hoverxref_tooltip_animation }}',
        animationDuration: {{ hoverxref_tooltip_animation_duration }},
        side: '{{ hoverxref_tooltip_side }}',
        content: '{{ hoverxref_tooltip_content }}',

        functionBefore: function(instance, helper) {
            var $origin = $(helper.origin);
            var project = $origin.data('project');
            var version = $origin.data('version');
            var doc = $origin.data('doc');
            var section = $origin.data('section');

            console.debug('Data: project=' + project + ' version=' + version + ' doc=' + doc + ' section=' + section);

            // we set a variable so the data is only loaded once via Ajax, not every time the tooltip opens
            if ($origin.data('loaded') !== true) {
                // TODO: improve URL handling here
                var url = '{{ hoverxref_tooltip_api_host }}' + '/api/v2/embed/?' + 'project=' + project + '&version=' + version + '&doc=' + doc + '&section=' + section;
                $.get(url, function(data) {

                    // call the 'content' method to update the content of our tooltip with the returned data.
                    // note: this content update will trigger an update animation (see the updateAnimation option)
                    instance.content(data['content']);

                    // to remember that the data has been loaded
                    $origin.data('loaded', true);
                });
            }
        },

        functionReady: function(instance, helper) {
            // most of Read the Docs Sphinx theme bases its style on "rst-content".
            // We add that class to the tooltipser HTML tag here by default or a user-defined one.
            helper.tooltip.classList.add('{{ hoverxref_tooltip_class }}');

            if (sphinxtabs) {
                // https://github.com/djungelorm/sphinx-tabs
                console.debug('Triggering Sphinx Tabs rendering');
                (function(d, script) {
                    // HACK: please, improve this code to call the content of "tab.js" without creating a script element

                    // Get the URL from the current generated page since it's not always the same
                    var src = $('script[src$="sphinx_tabs/tabs.js"]')[0].src;

                    script = d.createElement('script');
                    script.type = 'text/javascript';
                    script.onload = function(){
                        // remote script has loaded
                    };
                    script.src = src;
                    d.getElementsByTagName('head')[0].appendChild(script);

                    // Once the script has been executed, we remove it from the DOM
                    script.parentNode.removeChild(script);
                }(document));
            };

            setTimeout(
                reRender,
                50,
                instance,
                helper
            );
        }
    })});
